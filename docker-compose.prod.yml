version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - '3001:${PORT_SERVER}'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:16-alpine3.20
    environment:
      POSTGRES_USER: ${USERNAME_DB}
      POSTGRES_PASSWORD: ${PASSWORD_DB}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - '5432:${PORT_DB}'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${USERNAME_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_service
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - '${REDIS_PORT}:6379'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - app-network
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_service
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_PORT}
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_service
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:${KAFKA_PORT}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - '9092:${KAFKA_PORT}'

    networks:
      - app-network
volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
